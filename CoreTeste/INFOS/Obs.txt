Pacotes que preciso instalar via NUGET, seguindo a cronologia do projeto!
OBS: instalar npm install  na raíz do projeto, sempre, na raíz pq vai ter o package.json

1 ° Instalar o Entity Framework => Install-Package Microsoft.EntityFrameworkCore -Version 1.1.0
Install-Package Microsoft.EntityFrameworkCore.SqlServer  -Version 1.1
Install-Package Microsoft.EntityFrameworkCore.Tools -Version 1.1 ---> Esse é o do Migration
Install-Package Microsoft.EntityFrameworkCore.Design -Version 1.1 -- Esse tbm
Install-Package AutoMapper
Install-Package AutoMapper.Extensions.Microsoft.DependencyInjection -Version 1.2.0
npm install ng2-toasty@2.5.0 --save
npm install webpack -g
npm install raven-js --save
npm install underscore e npm install @types/underscore
npm install --save underscore
npm install auth0-lock angular2-jwt --save
npm install --save auth0-js
npm install chart.js angular2-chartjs --save
Install-Package Microsoft.Extensions.SecretManager.Tools -Version 2.0.0



* Passo a passo pra nao se perder

- Criar as Models e o DBContext
- Adicionando "Dependence Injection" par ao DbContext, registrar elas na classe Startup.cs e add a conn na appsettings.json, isso no CORE, porem no MVC add isso web.config
- Daí rodar o Migration pra criar tudo direitinho, mas ainda sem os dbsets.
- Depois como noa adicionamos os db-sets, vamos usar o Remove-Migration -Force, q deleta o ultimo registro gerado pelo Migration e rodar outro Add-Migration
- Depois de  adicionar uns data annotations e seeds no banco, comecei a controller, tive problemas ao gerar pelo VS, gera varios erros estranhos.
- Daí tive que da um ctrl c + ctrl v num controller pra comecar a montar meu controller webapi
- Após o webapi na controller, criei um Resource, q é como se fosse o meu DTO
- Após os Resources(dtos), vamos add o automapper no projeto(nuget) e configurar ele na classe Startup.css em COnfigureService
- Adicionar o AutoMapper nos controles, e criar uma pasta Mapping pra cuidar dos maps profiles
- Agora começa o client, sao varios arquivos, pra mexer. Fiz um checkin aqui pra saber quais, nome do check-in -> Start ANGULAR
- Após adicionar os modules pra funfar o angular, a gente constroi serviços que vao ser consumidos pelo component, estes serviços(web api) consomem as infos do banco
- criou o serviço com o http, etc, injeta no construtor pra usar e depois add no appmodule o serviço dentro do provider
- IMPORTANTISSIMO, nesse meu exemplo o meu app.module é o app.module.client e as rotas tao no app.module.shared
- No html, quando for usar o ngModel, adicionar a propriedade name, senao, nao funfa, vem um objeto vazio
<select id="make" class="form-control" (change)="onMakeChange()" [(ngModel)]="vehicle.make" name="make">
- Criando o service do Features, sempre q criar uma services.ts, add no appmodule(app.module.client) esse cara pra poder usar.
- Mais um exemplo PICA do zenconding (div.form-group>label+input[type='text'].form-control)*3
- OBS: Na versão 1 do entityframework do netCore, não tinha ainda o n to n, tive adicionar essa tratativa no MappingProfile. NO EF 6 funfa automatico.
- Sempre começando por propriedades, depois vem os constructors e finalmente os methods.
- No caso de ser uma rota unica como essa '/api/vehicles' facilita criar uma rota no topo da classe, como: [Route("/api/vehicles")]
-  Repare que no post do api/vehicle, tem mais um item a se guardar. [FromBody], repare q nos testes usando o Postaman, é no body q eu passo o meu json.
- Ex. Jason do http://localhost:52785/api/vehicles/
-  {
    modelId: 4,
    isRegistered: true,
    contact: {
        name: "Allan SuRu2",
        email: "allansuru@hotmail.com",
        phone: "221213"
    },
    features: [1,2,3]
}
- Como repararam meu json, é montando no Resource, nesse caso, VehicleResource, que evidentemente tem q ta mapeado no mapping e no api/vehicles, pq esse cara tem ligacao
com contato, e é uma boa prática criar um resource!!
- PRA ESTUDOS:. Criei uma coluna ativo pro makes e entendi bastante a questao do model, resource e json, entendi tbm q da pra manipular de ambos os
lados(server, client), mas qnd vem do server eu manipo e ja reflete direto no client, eu tbm consigo manipular no client, porem, tem q fazer um post desse objeo.
- Sempre prefira Fluent API, mais completo que data annotation, data annotation, bom pra validar inputs.
- Depois q arrumei o post e put, e testando no POSTMAN, temos o seguinte retorno do json do vehicle
{
    "id": 13,
    "model": {
        "id": 4,
        "name": "Make2-ModelA"
    },
    "make": {
        "id": 5,
        "name": "Make2"
    },
    "isRegistered": true,
    "contact": {
        "name": "NIKOLAS TESLA PUT",
        "email": "teste@hotmail.com",
        "phone": "121"
    },
    "lastUpdate": "2017-10-26T20:11:09.1951992-02:00",
    "features": [
        {
            "id": 1,
            "name": "Feature1"
        }
    ]

- Repare que ate esse ponto no git, temos no VehicleController, mt código repetido, apesar de já ter feito alguns refactores nas classes. mas nos métodos,
tem mt repeticao como isso aqui:

context.Vehicles
                 .Include(v => v.Features)
                   .ThenInclude(vf => vf.Feature)
                 .Include(v => v.Model)
                   .ThenInclude(m => m.Make)
                 .SingleOrDefaultAsync(v => v.Id == id);

Percebido isso, vamos adicionar na pasta de persistencia um Vehicle Repositorio com esse codigo acima e sua Interface. VehicleRepository : IVehicleRepository
- Criada a interface, vamos configurar a injecdao de  dependencia no Startup.cs
- Repare que no VehicleController tem esses tres caras no construtor, ou seja, temos que injet-alos pra usá-los na classe e configurar no startup.
construtor:    this.context = context;
            this.mapper = mapper;
            this.repository = repository;


Configurar no startup:  services.AddScoped<IVehicleRepository, VehicleRepository>();
            services.AddAutoMapper();
            services.AddDbContext<VegaDbContext>(options => options.UseSqlServer(Configuration.GetConnectionString("Default")));

injetado Irepository, automapper e context(DB)
- pra cada interface que vamos usar injetando, adicionamos aqui(Startup.cs) a referencia do msm.
- Reparem que chegou um ponto ao avançar o código, que só temos Interfaces sendo usadas na controller, isso se chama, baixo acoplamento - SOLID!!
 fica mais facil aplicar unit test, se tiver que mudar alguma coisa no context, nao preciso mudar em um monte de lugar. Encapsulamos o repositoio
- Tava com problema sempre q eu carregava o meu vehicle-forms, adicionei no app.module.server.ts o FormsModule no import e resolveu!
- Instalando o toast no meu projeto npm install ng2-toasty --save
- Instalando webpack npm install webpack -g
- Após instalar o toast, é importante adicionar seu estilos, em webpack.config.vendor.js!!
  rode o seguinte comando:  webpack --config webpack.config.vendor.js e pra efetivar mais uma vez webpack
- Mosh fala do sentry.io, esse cara é um logging service
- Chegou num ponto que é interessante já criar o model no meu client pra trabalhar mais facilmente como objeto, entao foi criado as interface, tudo no msm arquivo,
depois da pra seraparar pra ficar mais bonito e criamos um metodo de setVehicle.
- agora entra mais modulo pra ser instalado - npm install underscore e npm install @types/underscore , logo depois de instalar ir no webpack.config.vendor.js
 e add o   'underscore', e rodar o webpack --config webpack.config.vendor.js
 - Criando filtros, no client é mt fácil, no objeto temos o filter(), agora no server, criamos o filterResource(api controller), o model Filter e add no mapping
  Adicionamos o filtro no Repositorio de veiculos(Repository, IRepository) na function GetVehicles() ==> Isso foi o Domain Part.
  - API part Filter, vamos para o API - VehicleController
  - ESTRANHO, perdeu referencia pro underscore, npm install --save underscore, reinstalei, funfou!
  - Instalar os icones, em npm install font-awesome --save, add o css no vendor.js e rodar o webpack e novamente rodar(se nao rodar 2 vzs, da ruiim!!)
  webpack --config webpack.config.vendor.js
  - https://l-lin.github.io/angular-datatables/#/basic/with-options -> Datatable do Angular2,4
  - Interessante o Observable no caso do submit, recebendo o valor e fazendo o subscrable
  - Adicionando o modelo de Photos, e usando migration neh, pra adicionar a referencia no banco da tabela Vehicles já que adicionamos uma coleção na 
  model de Vehicles.cs
  - Repare que, no migration da Photo(Pasta Migration - AddPhoto), eu crio a tabela no banco, e como, eu adicionei no model Vehicle a coleção de Photos e
  por boas praticas eu inicializei a mesma, na hora q criou a tabela no banco(Photo), ela adicionou a FK de VehicleId.. tá certinho!! 
  OBS: Só gera o migration depois de  add o DbSet<Photo> no DbContext da aplicação
  - Criamos um novo api pro vehicles/vehicleId/photos, testamos no Postman com Key file. MT FODA, lembrando que vc tem q transformar o nome do file em
 um GUID. SEGURANÇA. Aquela historia, controler, model/Resource/Mapping, e no controler as interfaces pra trabalhar com isso tudo
 Foi criado junto no upload uma pasta uploads no wwwroot C:\Users\allan\OneDrive\Documents\Visual Studio 2017\Projects\CoreTeste\CoreTeste\wwwroot\uploads\
 - Criando as validações para as fotos, criamos no appsettings.json os valores para o tamanho máximo e os formatos aceitos, repare que precisa ser 
 injetado as dependencias desse cara no Startup.cs
 - Lembrando que no netCore, as configurações fazemons no appsetting.json, mas, no MV5, faríamos isso no web.config!!!!!!
- ENTENDIDO: Nao preciso mexer no app.server.module, mexo no app.shared.module q sao as rotas e no app.browser.module
- Criamos um Repositorio para fotos, e sua interface, lembrar sempre de injetar qlq repositório criado no Startup.cs
 - Compreendendo autenticação com o AUth2.0, criei uma conta no https://auth0.com/
 - Testei no postaman o  [Authorize], validei com um token q eu gerei no link acima
 - pra descriptografar meu token, tem esse site https://jwt.io/ 
 - Usando no client : https://www.udemy.com/aspnet-core-angular/learn/v4/t/lecture/7198326?start=0
 - Mais um cara pra instalar npm install auth0-lock angular2-jwt --save na raíz do projeto, sempre, na raíz pq vai ter o package.json
 - Instalado bora no webpack.config.vendor.js add os  'angular2-jwt','auth0-lock', e rodar o webpack --config webpack.config.vendor.js
 - depois disso vou no angular e add um novo serviço pra esse cara, colando o conteudo la do https://manage.auth0.com, aba clients(menu lateral esquerdo)
 - Qnd eu adiciono o Auth no meu menu, preciso criar usuarios
 user1@estudos.com - pass@word
 - um erro de acess- control - No 'Access-Control-Allow-Origin' header is present on the requested resource. Origin 'http://localhost:50349'
 - no https://manage.auth0.com na aba Clients em 'Allowed Callback URLs' adiciona o meu localhost http://localhost:50349' e 'http://localhost:50349/vehicles', http://localhost:4200/callback pq eh meu home
 - IMPORTANTE -- Nao esquecer de injetar o  auth.handleAuthentication(); no meu caso aqui, no NavMenuComponent
 - Funcionando minha tela de login, posso customizá-la facilmente em "Hosted Pages"
 -- Funfa de fora - https://allansuru.auth0.com/login?client=24Zk6UElCxtVL7KV55GICchel7gHcngg
 -- Criei umas roles pra Admin, vide no meu auth0
 - Criei o AuthGuard(pra validar a autenticacao), por exemplo: se eu jogo /admin sem esse cara, por mais que eu valide o botao com um *ngIf="auth.isInRole('admin')"
 se a pessoa souber a rota no caso,   { path: 'admin', component: AdminComponent},  ele vai cair na pagina, mas, com esse componente validando na rota
   { path: 'admin', component: AdminComponent, canActivate: [AuthGuard] },  ele vai verificar q ta expirado o login e pedir pra logar! esse é o jeito certo, e nao
   validando o botao!!
   - Lembrando que como add esse cara la no app.shared.module.ts, nao posso esquecer de add esse cara no provider no outro app.browser.module.ts 
   - Joguei o progresService na view q ela é usada, ou seja, tirei do global la do  app.browser.module e joguei no view Vehicle no @Component, posso add o provider: []
   - Adicionando chart no projeto - npm install chart.js angular2-chartjs --save, depois de instalar, no webpack add 'chart.js', 'angular2-chartjs'  rode webpack --config webpack.config.vendor.js 
   depois de instalado tudo, importa a biblioteca no app.shared.module.ts
   - Na reta final, to refactorando alguns metodos, por ex, o PhotoController, Upload, tava grandao, daí criei uma interface pra tratar o upload, SEMPRE
   lembrar de no caso, de criar uma nova INTERFACE, injetar ela no Startup.cs, senao nao funfa
   - Refactorei algumas coisas, sempre criando suas interfaces e adicionandp no Startup.cs
   - Pra fechar! Instalando o secret manager pra esconder por exemplo a minha conexao de string - BOAS PRATICAS
   https://docs.microsoft.com/pt-br/aspnet/core/security/app-secrets?tabs=visual-studio
   - adicionei no csproj o    <UserSecretsId>coreEstudos-project</UserSecretsId>
   -- pra gerenciar pelo win C:\Users\allan\AppData\Roaming\Microsoft\UserSecrets\coreEstudos-project
   - Instalando Install-Package Swashbuckle.AspNetCore ,  https://docs.microsoft.com/pt-br/aspnet/core/tutorials/web-api-help-pages-using-swagger?tabs=visual-studio

* Lembretes

Add-Migration "Nome"
UpdateDatabase

Diferentemente de ter um web.config, temos um appsetings.json, lá devemos add a conexao de string por exemplo Configuration["ConnectionStrings:Default"]
 
 Win Autentication - "server=localhost; database=vega; Integrated Security=SSPI;"
 SQL Autentication - "server=localhost; database=vega; user id=sa; password=passw;"

 Outro ponto a levar em consideração, na hora de rodar o Add-Migration "Initial Model", rodar aos poucos, por exemplo, antes dos dobsets, poucas classes, menos 
 chance de dar erro



 *Zencoding
   div.form-group>label[for='model']+select[id='model'].form-control


 //"Data Source=DESKTOP-Q5M5PCV\SQLEXPRESS;Initial Catalog=vega;Integrated Security=True";



 //OLD appsetings.json  => antes de gerar o secrets.json
{
  "ConnectionStrings": {
    "Default": "Data Source=DESKTOP-Q5M5PCV\\SQLEXPRESS;Initial Catalog=EstudosCoreAngular;Integrated Security=True"
  },



  --Agilizando criacao de componentes, etc no angular || ANGULAR CLI -> http://blog.alura.com.br/criando-aplicacoes-angular-com-angular-cli/

  PREREQ : npm install --save-dev @angular/cli@latest

  1ª - Componente = ng g c NOME

  OBS: NOME, Vai ser criado a pasta com o "NOME", e os components(css,html,spec e ts)
  OBS2: Esse cara já injeta no app-module -- @NgModule({ declarations: 'NOMECOMPONENT'}) 

  2ª - Serviço =  ng g s NOME



  DOM STYLE OBJECTS = https://www.w3schools.com/jsref/dom_obj_style.asp
  PIPES ANGULAR = https://v2.angular.io/docs/ts/latest/guide/pipes.html




  ISOLANDO UM COMPONENTE DE ESTUDOS - FUNFANDO EM OUTRO PROJETO!

import { Component } from '@angular/core'
import { CourseService } from "../../services/courses.service";


@Component({
    selector: 'courses',
    template: `<h2>{{   getTitle() }} </h2>
            <ul>
                    <li *ngFor="let c of courses">
                           {{ c }}
                    </li>
            </ul>
<h1  [textContent]='title2'></h1>
<img [src] = "imgUrl" />

<table>
<tr>
<td [attr.colspan]='colspan'></td>
</tr>
</table>
COM Two-Waying binding<input [(ngModel)]="email" (keyup.enter)="valueDigitado3();" /> <br>
COM Template Variables<input #valor (keyup.enter)="valueDigitado2(valor.value);" /> <br>
SEM Template Variables<input (keyup.enter)="valueDigitado($event);" /> <br>
<input (keyup.enter)="onKeyUp2();" />
<!--<input (keyup)="onKeyUp($event);" /> -->
<div (click)="clickDiv($event);">
<button type="button" (click)="ativa();onSave($event);" class="btn btn-primary" [style.backgroundColor]="isActive ? 'blue': 'white'" [class.active]="isActive">Primary</button>
</div>
{{ course.title | uppercase }} <br />
{{ course.students | number }} <br />
{{ course.rating | number:'1.1-1'  }} <br />
{{ course.price | currency:'BRL':true:'3.2-2' }} <br />
{{ course.releaseDate | date:'shortDate' }} <br />

`

})

//pascal name Conventional
export class CoursesComponent {

    course = {
        title: 'Estudos Angular2+',
        rating: 4.9745,
        students: 30123,
        price: 190.05,
        releaseDate: new Date(2017,1,1)
    }
    email = 'me@email.com';
    isActive = false;
    title = "Curso! - Allan Passos";
    title2 = "Estudos e + estudos"
    colspan = 10;
    imgUrl = "http://gearnuke.com/wp-content/uploads/2016/07/final-fantasy-xv-1-2-768x432.png";

    courses: string[] = [];

    //isso aqui evita o NEW - FAZENDO ISSO FICA FORTEMENTE ACOPLADO, mas pra funfar tem q add esse serviço no app.module(provider)
    //injecao de dependencia = provedor de serviços desacoplados === 'baixo acoplamento na veia'
    constructor(service: CourseService) {

        this.courses = service.getCourses();
    } 
    ativa()
    {
        this.isActive = true;
    }
    clickDiv($event: any) {
        console.log('clique DIV', $event);
    }
    onSave($event: any) {
        $event.stopPropagation(); // para a arvore do DOM, ou seja, só vai estorar o console do btn click, o da div ele caga!
        console.log('ON SAVE', $event);
        console.log($event.x);
    
    }

    getColor() {
        let isRed = 'red ! important';
    }

    getTitle() {
        return this.title;
    }
    onKeyUp($event:any) {
        if ($event.keyCode == 13) console.log('ENTER was pressed!'); //uma maneira MELHOR ABAIXO!
    }
    onKeyUp2() {
        console.log('ENTERRRR was pressed');
    }
    valueDigitado($event:any) {
        console.log('Valor Digitado UGLY: ', $event.target.value);
    }
    valueDigitado2(valor:any) {
        console.log('Valor Digitado BEAUTY-TEMPLATE VARIABLE: ', valor);
    }
    valueDigitado3(){
        console.log(this.email);
    }
}